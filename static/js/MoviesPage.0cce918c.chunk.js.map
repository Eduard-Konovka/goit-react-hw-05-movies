{"version":3,"sources":["services/api-service.js","services/settings-url.js","components/Button/Button.jsx","components/Button/Button.module.css","pages/MoviesPage/MoviesPage.jsx"],"names":["axios","require","apiService","url","PATH_HOME","PATH_SEARCH","params","api_key","URL","KEY","page","params_search","language","query","include_adult","fetchArticles","request","BASE","URLSearchParams","toString","get","data","results","incrementPage","this","resetPage","newPage","searchQuery","newQuery","movieApiService","PATH","id","W342_IMG_URL","W500_IMG_URL","W780_IMG_URL","TRAILER","Button","type","forClick","children","className","s","btn","onClick","defaultProps","module","exports","MoviesPage","pathname","useLocation","useState","input","setInput","search","setSearch","movies","setMovies","useEffect","then","onSubmit","e","preventDefault","onChange","target","value","style","marginRight","marginBottom","map","movie","to","state","from","label","title"],"mappings":"kPACMA,EAAQC,EAAQ,IAGTC,EAAa,CACxBC,IAAK,GACLC,UAAW,iBACXC,YAAa,eACbC,OAAQ,CACNC,QAAQ,GAAD,OAAKC,IAAIC,KAChBC,KAAM,GAERC,cAAe,CACbC,SAAU,QACVC,MAAO,GACPC,eAAe,GAGXC,cAdkB,SAcJC,GAAU,IAAD,iIAEzB,EAAKb,IADS,WAAZa,EACF,UAAcR,IAAIS,KAAlB,YAA0B,EAAKZ,YAA/B,YAA8C,IAAIa,gBAChD,EAAKZ,QACLa,WAFF,YAEgB,IAAID,gBAAgB,EAAKP,eAAeQ,YAExD,UAAcX,IAAIS,KAAlB,YACE,EAAKb,UADP,YAEIY,EAFJ,YAEe,IAAIE,gBAAgB,EAAKZ,QAAQa,YARvB,SAWJnB,EAAMoB,IAAI,EAAKjB,KAXX,uBAWnBkB,EAXmB,EAWnBA,KAXmB,kBAYpBA,EAAKC,SAZe,8CAe7BC,cA7BwB,WA8BtBC,KAAKlB,OAAOI,MAAQ,GAGtBe,UAjCwB,WAkCtBD,KAAKlB,OAAOI,KAAO,GAGjBA,WACF,OAAOc,KAAKlB,OAAOI,MAGjBA,SAAKgB,GACPF,KAAKlB,OAAOI,KAAOgB,GAGjBC,kBACF,OAAOH,KAAKb,cAAcE,OAGxBc,gBAAYC,GACdJ,KAAKb,cAAcE,MAAQe,IAKlBC,EAAkB,CAC7BC,KAAK,QACLxB,OAAQ,CACNC,QAAQ,GAAD,OAAKC,IAAIC,KAChBG,SAAU,SAGNG,cAPuB,SAOTC,EAASe,GAAK,IAAD,mIACzB5B,EADyB,UAChBK,IAAIS,KADY,YACJ,EAAKa,KADD,YACSC,GADT,OACcf,EADd,YACyB,IAAIE,gBAC1D,EAAKZ,QACLa,YAH6B,SAKRnB,EAAMoB,IAAIjB,GALF,uBAKvBkB,EALuB,EAKvBA,KALuB,kBAMxBA,GANwB,gD,gCCzDpBb,IATH,CACVS,KAAM,+BACNR,IAAK,mCACLuB,aAAc,kCACdC,aAAc,kCACdC,aAAc,kCACdC,QAAS,mC,gCCLX,8DAEe,SAASC,EAAT,GAA+C,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAC/C,OACE,wBAAQF,KAAMA,EAAMG,UAAWC,IAAEC,IAAKC,QAASL,EAA/C,SACGC,IAKPH,EAAOQ,aAAe,CACpBD,QAAS,kBAAM,MACfJ,SAAU,O,mBCZZM,EAAOC,QAAU,CAAC,IAAM,sB,8ICKT,SAASC,IACtB,IAAQC,EAAaC,cAAbD,SACR,EAA0BE,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KAWA,OATAC,qBAAU,WACO,KAAXJ,IAIJnD,IAAWyB,YAAc0B,EACzBnD,IAAWa,cAAc,UAAU2C,MAAK,SAAArC,GAAI,OAAImC,EAAUnC,SACzD,CAACgC,IAGF,gCACE,uBACEM,SAAU,SAAAC,GACRA,EAAEC,iBACFP,EAAUH,IAHd,UAME,uBAAOW,SAAU,SAAAF,GAAC,OAAIR,EAASQ,EAAEG,OAAOC,UACxC,eAAC,IAAD,CAAQ3B,KAAK,SAAb,UACE,cAAC,IAAD,CAAU4B,MAAO,CAAEC,YAAa,EAAGC,cAAe,KADpD,eAMF,6BACGZ,EAAOa,KAAI,SAAAC,GAAK,OACf,6BACE,cAAC,IAAD,CACEC,GAAE,UAAKD,EAAMtC,IACbwC,MAAO,CAAEC,KAAM,CAAExB,WAAUyB,MAAO,iBAFpC,SAIGJ,EAAMK,SALFL,EAAMtC","file":"static/js/MoviesPage.0cce918c.chunk.js","sourcesContent":["import URL from './settings-url';\nconst axios = require('axios');\n\n// Запросы на списки популярных фильмов НА СЕГОДНЯ или ПО КЛЮЧЕВОМУ СЛОВУ для создания коллекции на главной странице\nexport const apiService = {\n  url: '',\n  PATH_HOME: 'trending/movie',\n  PATH_SEARCH: 'search/movie',\n  params: {\n    api_key: `${URL.KEY}`,\n    page: 1,\n  },\n  params_search: {\n    language: 'en-US',\n    query: '',\n    include_adult: false,\n  },\n\n  async fetchArticles(request) {\n    if (request === 'search') {\n      this.url = `${URL.BASE}/${this.PATH_SEARCH}?${new URLSearchParams(\n        this.params,\n      ).toString()}&${new URLSearchParams(this.params_search).toString()}`;\n    } else {\n      this.url = `${URL.BASE}/${\n        this.PATH_HOME\n      }/${request}?${new URLSearchParams(this.params).toString()}`;\n    }\n\n    const { data } = await axios.get(this.url);\n    return data.results;\n  },\n\n  incrementPage() {\n    this.params.page += 1;\n  },\n\n  resetPage() {\n    this.params.page = 1;\n  },\n\n  get page() {\n    return this.params.page;\n  },\n\n  set page(newPage) {\n    this.params.page = newPage;\n  },\n\n  get searchQuery() {\n    return this.params_search.query;\n  },\n\n  set searchQuery(newQuery) {\n    this.params_search.query = newQuery;\n  },\n};\n\n// Запрос информации О ФИЛЬМЕ, ОБ АКТЁРСКОМ СОСТАВЕ и ОБЗОРОВ для страницы кинофильма\nexport const movieApiService = {\n  PATH: `movie`,\n  params: {\n    api_key: `${URL.KEY}`,\n    language: 'en-US',\n  },\n\n  async fetchArticles(request, id) {\n    const url = `${URL.BASE}/${this.PATH}/${id}${request}?${new URLSearchParams(\n      this.params,\n    ).toString()}`;\n\n    const { data } = await axios.get(url);\n    return data;\n  },\n};\n","const URL = {\n  BASE: 'https://api.themoviedb.org/3',\n  KEY: 'd59d4b143292fc56b6769ba48f713e41',\n  W342_IMG_URL: 'https://image.tmdb.org/t/p/w342',\n  W500_IMG_URL: 'https://image.tmdb.org/t/p/w500',\n  W780_IMG_URL: 'https://image.tmdb.org/t/p/w780',\n  TRAILER: 'https://www.youtube.com/embed/',\n};\n\nexport default URL;\n","import PropTypes from 'prop-types';\nimport s from './Button.module.css';\n\nexport default function Button({ type, forClick, children }) {\n  return (\n    <button type={type} className={s.btn} onClick={forClick}>\n      {children}\n    </button>\n  );\n}\n\nButton.defaultProps = {\n  onClick: () => null,\n  children: null,\n};\n\nButton.propTypes = {\n  type: PropTypes.oneOf(['button', 'submit', 'reset']).isRequired,\n  onClick: PropTypes.func,\n  children: PropTypes.node,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__19gL7\"};","import { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { ImSearch } from 'react-icons/im';\nimport { apiService } from '../../services/api-service';\nimport Button from 'components/Button/Button';\n\nexport default function MoviesPage() {\n  const { pathname } = useLocation();\n  const [input, setInput] = useState('');\n  const [search, setSearch] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    if (search === '') {\n      return;\n    }\n\n    apiService.searchQuery = search;\n    apiService.fetchArticles('search').then(data => setMovies(data));\n  }, [search]);\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          setSearch(input);\n        }}\n      >\n        <input onChange={e => setInput(e.target.value)} />\n        <Button type=\"submit\">\n          <ImSearch style={{ marginRight: 8, marginBottom: -1 }} />\n          Search\n        </Button>\n      </form>\n\n      <ul>\n        {movies.map(movie => (\n          <li key={movie.id}>\n            <Link\n              to={`${movie.id}`}\n              state={{ from: { pathname, label: 'Go to Movies' } }}\n            >\n              {movie.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n"],"sourceRoot":""}